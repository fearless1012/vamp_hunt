<!DOCTYPE HTML>
<html>
	 <script>
		var canvas,context;
		var map_size;
		var no_of_points;
		var point_radius;
		var no_of_hunters;
		var x ,y;
		var vamp;
		var hunt;
		var caught;
		var next;
		var road_connected , rail_connected , underground_connected , boat_connected ;
		
		window.onresize = resize;
		
		function resize()
		{
			canvas.width = window.innerWidth;
			canvas.height = window.innerHeight;
			
			if(canvas.width<canvas.height)
			map_size = canvas.width;
			else
			map_size = canvas.height
			
			point_radius = 5*map_size/500;
			
			points_generator();
			draw_map();
		}
		function init()
		{
			no_of_points = 94;
			
			no_of_hunters =4;
						
			x = new Array(no_of_points);
			y = new Array(no_of_points);	
			
			next = new Array(no_of_points);
			
			hunt = new Array(no_of_hunters);
			
			road_connected = new Array(no_of_points);
			rail_connected = new Array(no_of_points);
			underground_connected = new Array(no_of_points);
			boat_connected = new Array(no_of_points);
			
			for(i=0;i<no_of_points;i++)
			{
				next[i] = 0;
			}
		}
		function points_generator()
		{
			x[0] = 13* map_size/500 ;  
			y[0] = 107* map_size/500 ;  
			x[1] = 19* map_size/500 ;  
			y[1] = 79* map_size/500 ;  
			x[2] = 46* map_size/500 ;  
			y[2] = 46* map_size/500 ;  
			x[3] = 91* map_size/500 ;  
			y[3] = 17* map_size/500 ;  
			x[4] = 112* map_size/500 ;  
			y[4] = 59* map_size/500 ;  
			x[5] = 75* map_size/500 ;  
			y[5] = 68* map_size/500 ;  
			x[6] = 69* map_size/500 ;  
			y[6] = 97* map_size/500 ;  
			x[7] = 68* map_size/500 ;  
			y[7] = 133* map_size/500 ;  
			x[8] = 62* map_size/500 ;  
			y[8] = 189* map_size/500 ;  
			x[9] = 17* map_size/500 ;  
			y[9] = 200* map_size/500 ;  
			x[10] = 60* map_size/500 ;  
			y[10] = 233* map_size/500 ;  
			x[11] = 44* map_size/500 ;  
			y[11] = 295* map_size/500 ;  
			x[12] = 124* map_size/500 ;  
			y[12] = 294* map_size/500 ;  
			x[13] = 73* map_size/500 ;  
			y[13] = 341* map_size/500 ;  
			x[14] = 46* map_size/500 ;  
			y[14] = 352* map_size/500 ;  
			x[15] = 37* map_size/500 ;  
			y[15] = 388* map_size/500 ;  
			x[16] = 79* map_size/500 ;  
			y[16] = 388* map_size/500 ;  
			x[17] = 47* map_size/500 ;  
			y[17] = 432* map_size/500 ;  
			x[18] = 72* map_size/500 ;  
			y[18] = 423* map_size/500 ;  
			x[19] = 81* map_size/500 ;  
			y[19] = 441* map_size/500 ;  
			x[20] = 57* map_size/500 ;  
			y[20] = 495* map_size/500 ;  
			x[21] = 101* map_size/500 ;  
			y[21] = 460* map_size/500 ;  
			x[22] = 105* map_size/500 ;  
			y[22] = 441* map_size/500 ;  
			x[23] = 143* map_size/500 ;  
			y[23] = 448* map_size/500 ;  
			x[24] = 177* map_size/500 ;  
			y[24] = 384* map_size/500 ;  
			x[25] = 201* map_size/500 ;  
			y[25] = 396* map_size/500 ;  
			x[26] = 190* map_size/500 ;  
			y[26] = 432* map_size/500 ;  
			x[27] = 190* map_size/500 ;  
			y[27] = 448* map_size/500 ;  
			x[28] = 244* map_size/500 ;  
			y[28] = 443* map_size/500 ;  
			x[29] = 273* map_size/500 ;  
			y[29] = 448* map_size/500 ;  
			x[30] = 307* map_size/500 ;  
			y[30] = 471* map_size/500 ;  
			x[31] = 288* map_size/500 ;  
			y[31] = 402* map_size/500 ;  
			x[32] = 155* map_size/500 ;  
			y[32] = 325* map_size/500 ;  
			x[33] = 329* map_size/500 ;  
			y[33] = 390* map_size/500 ;  
			x[34] = 356* map_size/500 ;  
			y[34] = 380* map_size/500 ;  
			x[35] = 385* map_size/500 ;  
			y[35] = 414* map_size/500 ;  
			x[36] = 465* map_size/500 ;  
			y[36] = 395* map_size/500 ;  
			x[37] = 421* map_size/500 ;  
			y[37] = 376* map_size/500 ;  
			x[38] = 409* map_size/500 ;  
			y[38] = 369* map_size/500 ;  
			x[39] = 387* map_size/500 ;  
			y[39] = 360* map_size/500 ;  
			x[40] = 371* map_size/500 ;  
			y[40] = 358* map_size/500 ;  
			x[41] = 315* map_size/500 ;  
			y[41] = 345* map_size/500 ;  
			x[42] = 269* map_size/500 ;  
			y[42] = 332* map_size/500 ;  
			x[43] = 232* map_size/500 ;  
			y[43] = 312* map_size/500 ;  
			x[44] = 227* map_size/500 ;  
			y[44] = 289* map_size/500 ;  
			x[45] = 194* map_size/500 ;  
			y[45] = 288* map_size/500 ;  
			x[46] = 198* map_size/500 ;  
			y[46] = 310* map_size/500 ;  
			x[47] = 272* map_size/500 ;  
			y[47] = 288* map_size/500 ;  
			x[48] = 362* map_size/500 ;  
			y[48] = 331* map_size/500 ;  
			x[49] = 432* map_size/500 ;  
			y[49] = 344* map_size/500 ;  
			x[50] = 427* map_size/500 ;  
			y[50] = 319* map_size/500 ;  
			x[51] = 430* map_size/500 ;  
			y[51] = 298* map_size/500 ;  
			x[52] = 404* map_size/500 ;  
			y[52] = 286* map_size/500 ;  
			x[53] = 394* map_size/500 ;  
			y[53] = 311* map_size/500 ;  
			x[54] = 416* map_size/500 ;  
			y[54] = 262* map_size/500 ;  
			x[55] = 389* map_size/500 ;  
			y[55] = 257* map_size/500 ;  
			x[56] = 335* map_size/500 ;  
			y[56] = 253* map_size/500 ;  
			x[57] = 307* map_size/500 ;  
			y[57] = 240* map_size/500 ;  
			x[58] = 209* map_size/500 ;  
			y[58] = 245* map_size/500 ;  
			x[59] = 224* map_size/500 ;  
			y[59] = 203* map_size/500 ;  
			x[60] = 279* map_size/500 ;  
			y[60] = 207* map_size/500 ;  
			x[61] = 263* map_size/500 ;  
			y[61] = 186* map_size/500 ;  
			x[62] = 337* map_size/500 ;  
			y[62] = 173* map_size/500 ;  
			x[63] = 362* map_size/500 ;  
			y[63] = 207* map_size/500 ;  
			x[64] = 409* map_size/500 ;  
			y[64] = 222* map_size/500 ;  
			x[65] = 448* map_size/500 ;  
			y[65] = 182* map_size/500 ;  
			x[66] = 449* map_size/500 ;  
			y[66] = 201* map_size/500 ;  
			x[67] = 456* map_size/500 ;  
			y[67] = 226* map_size/500 ;  
			x[68] = 471* map_size/500 ;  
			y[68] = 252* map_size/500 ;  
			x[69] = 444* map_size/500 ;  
			y[69] = 151* map_size/500 ;  
			x[70] = 416* map_size/500 ;  
			y[70] = 176* map_size/500 ;  
			x[71] = 387* map_size/500 ;  
			y[71] = 133* map_size/500 ;  
			x[72] = 365* map_size/500 ;  
			y[72] = 157* map_size/500 ;  
			x[73] = 335* map_size/500 ; 
			y[73] = 128* map_size/500 ;  
			x[74] = 303* map_size/500 ;  
			y[74] = 130* map_size/500 ;  
			x[75] = 141* map_size/500 ;  
			y[75] = 87* map_size/500 ;  
			x[76] = 162* map_size/500 ;  
			y[76] = 93* map_size/500 ;  
			x[77] = 177* map_size/500 ;  
			y[77] = 119* map_size/500 ;  
			x[78] = 174* map_size/500 ;  
			y[78] = 132* map_size/500 ;  
			x[79] = 182* map_size/500 ;  
			y[79] = 25* map_size/500 ;  
			x[80] = 185* map_size/500 ;  
			y[80] = 58* map_size/500 ;  
			x[81] = 199* map_size/500 ;  
			y[81] = 106* map_size/500 ;  
			x[82] = 308* map_size/500 ;  
			y[82] = 80* map_size/500 ;  
			x[83] = 416* map_size/500 ;  
			y[83] = 66* map_size/500 ;  
			x[84] = 458* map_size/500 ;  
			y[84] = 70* map_size/500 ;
			x[85] = 200* map_size/500 ;  
			y[85] = 137* map_size/500 ;  
			x[86] = 247* map_size/500 ;  
			y[86] = 131* map_size/500 ;  
			x[87] = 276* map_size/500 ;  
			y[87] = 125* map_size/500 ;  
			x[88] = 302* map_size/500 ;  
			y[88] = 110* map_size/500 ;  
			x[89] = 321* map_size/500 ;  
			y[89] = 99* map_size/500 ;  
			x[90] = 420* map_size/500 ;  
			y[90] = 125* map_size/500 ;  
			x[91] = 168* map_size/500 ;  
			y[91] = 183* map_size/500 ;  
			x[92] = 440* map_size/500 ;  
			y[92] = 467* map_size/500 ;
			x[93] = 128* map_size/500 ;  
			y[93] = 393* map_size/500 ;  
			
			connections();
		}
		function connections()
		{
			road_connected[0] = [1];   
			
			road_connected[1] = [0,2,6]; 
			
			road_connected[2] = [1,3,4,5];
			  
			road_connected[3] = [2,4,75];   
						  
			road_connected[4] = [2,3,5,75];
			
			road_connected[5] = [2,4,6];
			
			road_connected[6] = [1,5,7,78];
			
			road_connected[7] = [6,8,78];  
			  
			road_connected[8] = [7,9,10] ;
			
			road_connected[9] = [8,10];
			
			road_connected[10] = [8,9,11,12,13,91];
			
			road_connected[11] = [10,12,13,91];
			
			road_connected[12] = [11,13,16,46,91,93];
			  
			road_connected[13] = [10,11,12,14,16,91];   
						  
			road_connected[14] = [13,15,16,18];
			
			road_connected[15] = [];
			
			road_connected[16] = [];
			
			road_connected[17] = [];  
			  
			road_connected[18] = [] ;
			
			road_connected[19] = [];
			
			road_connected[20] = [];
			
			road_connected[21] = [];
			
			road_connected[22] = [];
			  
			road_connected[23] = [];   
						  
			road_connected[24] = [];
			
			road_connected[25] = [];
			
			road_connected[26] = [];
			
			road_connected[27] = [];  
			  
			road_connected[28] = [] ;
			
			road_connected[29] = [];
			
			road_connected[30] = [];
			
			road_connected[31] = [];
			
			road_connected[32] = [];
			  
			road_connected[33] = [];   
						  
			road_connected[34] = [];
			
			road_connected[35] = [];
			
			road_connected[36] = [];
			
			road_connected[37] = [];  
			  
			road_connected[38] = [] ;
			
			road_connected[39] = [];
			
			road_connected[40] = [];
			
			road_connected[41] = [];
			
			road_connected[42] = [];
			  
			road_connected[43] = [];   
						  
			road_connected[44] = [];
			
			road_connected[45] = [];
			
			road_connected[46] = [];
			
			road_connected[47] = [];  
		  
			road_connected[48] = [] ;
			
			road_connected[49] = [];
			
			road_connected[50] = [];
			
			road_connected[51] = [];
			
			road_connected[52] = [];
		  
			road_connected[53] = [];   
		  
			road_connected[54] = [];
			
			road_connected[55] = [];
			
			road_connected[56] = [];
			
			road_connected[57] = [];  
		  
			road_connected[58] = [] ;
			
			road_connected[59] = [];
			
			road_connected[60] = [];
			
			road_connected[61] = [];
			
			road_connected[62] = [];
		  
			road_connected[63] = [];   
		  
			road_connected[64] = [];
			
			road_connected[65] = [];
			
			road_connected[66] = [];
			
			road_connected[67] = [];  
		  
			road_connected[68] = [] ;
			
			road_connected[69] = [];
			
			road_connected[70] = [];
			
			road_connected[71] = [];
			
			road_connected[72] = [];
		 
			road_connected[73] = [];   
		  
			road_connected[74] = [];
			
			road_connected[75] = [];
			
			road_connected[76] = [];
			
			road_connected[77] = [];  
			  
			road_connected[78] = [] ;
			
			road_connected[79] = [];
			
			road_connected[80] = [];
			
			road_connected[81] = [];
			
			road_connected[82] = [];
		  
			road_connected[83] = [];   
		  
			road_connected[84] = [];
			
			road_connected[85] = [];
			
			road_connected[86] = [];
			
			road_connected[87] = [];  
		  
			road_connected[88] = [] ;
			
			road_connected[89] = [];
			
			road_connected[90] = [];
			
			road_connected[91] = [];
			
			road_connected[92] = [];
		
			road_connected[93] = [];   
		
			road_connected[94] = [];
			
			road_connected[95] = [];
			
			road_connected[96] = [];
			
			road_connected[97] = [];  
			  
			road_connected[98] = [] ;
			
			road_connected[99] = [];
			
			
					
		}
		function init_posi_randomiser()
		{
			var temp3;
			var temp = new Array(no_of_points);
			for(i=0;i<no_of_points;i++)
			{
				temp[i]=i;
			}
			for(i=0;i<no_of_points;i++)
			{
				var temp2 = Math.floor((no_of_points) * Math.random());
				for(j=0;j<(no_of_hunters+1);j++)
				{
					temp3 = temp[j];
					temp[j] = temp[temp2];
					temp[temp2] = temp3;
				}
			}
			
			vamp = temp[0];
			for(i=0;i<no_of_hunters;i++)
			{
				hunt[i]=temp[i+1];
			}
		}
		window.onload = function()
		{
			canvas = document.getElementById("myCanvas");
			context = canvas.getContext("2d");
			init();
			init_posi_randomiser();
			resize();
			
				canvas.addEventListener('mousedown', function(evt) {
			var mousePos = getMousePos(evt);
			for(i=0;i<no_of_points;i++)
			{
				if(mousePos.x>=(x[i]-point_radius) && mousePos.x<=(x[i]+point_radius) && mousePos.y>=(y[i]-point_radius) && mousePos.y<=(y[i]+point_radius))
				{
					console.log(i);
				}
			}
			
        }, false);
			vamp_turn();
		}	
		function getMousePos(evt) 
		{
			var rect = canvas.getBoundingClientRect(), root =document.documentElement;
			var mouseX = evt.clientX - rect.top - root.scrollTop;
			var mouseY = evt.clientY - rect.left - root.scrollLeft;
			return {
			  x: mouseX,
			  y: mouseY
			};
      }
		function draw_map()
		{
			var map = new Image();
			map.onload = function() 
			{
				context.drawImage(map, 0, 0,map_size,map_size);
				draw_points();
			};
			map.src = "map.jpg";
		}
		function draw_points()
		{
			
			for(var i=0;i<no_of_points;i++)
			{
				context.beginPath();
				context.arc(x[i],y[i],point_radius,0,Math.PI*2,true);
				context.lineWidth = 2;
				context.fillStyle = 'green';
				context.fill();
				if(next[i]==0)
				context.strokeStyle = '#003300';
				else
				context.strokeStyle = 'red';
				context.stroke();
				context.fillStyle = 'yellow';
				context.font = 'italic 25 pt Calibri';
				context.fillText(i, x[i]-point_radius, y[i]);
			}
		}
		function show_places(chosen)
		{
		vamp = 4;
			if(chosen == "road" )
			{
				for(i=0;i<road_connected[vamp].length;i++)
				{
					next[road_connected[vamp][i]] = 1 ;
				}
			}
			draw_map();
		}				
		function vamp_turn()
		{
			var choose = "road";
			show_places(choose);
		}
		
    </script>
  <body>
    <canvas id="myCanvas"></canvas>
  </body>
</html>
